%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 22.05.0 (http://poppler.freedesktop.org)
%%Creator: Chromium
%%LanguageLevel: 3
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 2450 791
%%HiResBoundingBox: 0 0 2449.9199 790.07996
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011, 2022 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfOPM false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/opm { dup /pdfOPM exch def
      /setoverprintmode where{pop setoverprintmode}{pop}ifelse  } def
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16L3 {
  1 index /CIDFont resourcestatus {
    pop pop 1 index /CIDFont findresource /CIDFontType known
  } {
    false
  } ifelse
  {
    0 eq { /Identity-H } { /Identity-V } ifelse
    exch 1 array astore composefont pop
  } {
    pdfMakeFont16
  } ifelse
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
  /pdfOPM where {
    pop
    pdfOPM /setoverprintmode where{pop setoverprintmode}{pop}ifelse 
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfMask {
  /ReusableStreamDecode filter
  skipEOD
  /maskStream exch def
} def
/pdfMaskEnd { maskStream closefile } def
/pdfMaskInit {
  /maskArray exch def
  /maskIdx 0 def
} def
/pdfMaskSrc {
  maskIdx maskArray length lt {
    maskArray maskIdx get
    /maskIdx maskIdx 1 add def
  } {
    ()
  } ifelse
} def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
/CIDInit /ProcSet findresource begin
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-H def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-V def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  /WMode 1 def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
end
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 2449.9199 790.07996 re
W
q
[0.24 0 0 -0.24 0 790.07996] cm
q
0 0 10208.332 3291.2964 re
W*
q
[3.125218 0 0 3.12641 41.641975 0] cm
/DeviceRGB {} CS
[0.1569 0.1922 0.2863] SC
/DeviceRGB {} cs
[0.1569 0.1922 0.2863] sc
0 0 3266.4324 1053.73962 re
f
Q
q
[22.303362 0 0 22.311867 450.83438 2423.2183] cm
/DeviceRGB {} CS
[1 1 1] SC
/DeviceRGB {} cs
[1 1 1] sc
9.42 8.1 m
6.1 20 l
4.06 20 l
0.32 5.64 l
2.42 5.64 l
5.1 17.32 l
5.14 17.32 l
8.360001 5.639999 l
10.480001 5.639999 l
13.700001 17.32 l
13.740001 17.32 l
16.42 5.639999 l
18.559999 5.639999 l
14.78 20 l
12.74 20 l
9.46 8.1 l
9.42 8.1 l
h
34.532001 18.280001 m
34.532001 20 l
23.932001 20 l
23.932001 5.64 l
34.392002 5.64 l
34.392002 7.360001 l
25.872002 7.360001 l
25.872002 11.76 l
33.732002 11.76 l
33.732002 13.480001 l
25.872002 13.480001 l
25.872002 18.280001 l
34.532001 18.280001 l
h
42.304001 7.3 m
42.304001 11.72 l
45.804001 11.72 l
47.664001 11.72 48.804001 11.16 48.804001 9.400001 c
48.804001 8.06 47.984001 7.300001 45.824001 7.300001 c
42.304001 7.300001 l
42.304001 7.3 l
h
40.363998 20 m
40.363998 5.64 l
46.683998 5.64 l
49.363998 5.64 50.743999 7.3 50.743999 9.26 c
50.743999 10.200001 50.403999 11.520001 48.823997 12.26 c
49.763996 12.64 51.423996 13.3 51.423996 15.76 c
51.423996 18.059999 49.723995 20 46.543995 20 c
40.363995 20 l
40.363998 20 l
h
42.304001 13.3 m
42.304001 18.34 l
46.444 18.34 l
48.464001 18.34 49.484001 17.32 49.484001 15.72 c
49.484001 13.700001 47.704002 13.3 46.124001 13.3 c
42.304001 13.3 l
h
66.068001 20 m
66.068001 5.64 l
71.888 5.64 l
75.627998 5.64 77.928001 8.480001 77.928001 12.620001 c
77.928001 15.840001 76.528 20 71.807999 20 c
66.068001 20 l
h
68.008003 7.3 m
68.008003 18.34 l
71.768005 18.34 l
74.288002 18.34 75.928009 16.360001 75.928009 12.74 c
75.928009 9.119999 74.268005 7.3 71.628006 7.3 c
68.008003 7.3 l
68.008003 7.3 l
h
94.540001 18.280001 m
94.540001 20 l
83.940002 20 l
83.940002 5.64 l
94.400002 5.64 l
94.400002 7.360001 l
85.880005 7.360001 l
85.880005 11.76 l
93.740005 11.76 l
93.740005 13.480001 l
85.880005 13.480001 l
85.880005 18.280001 l
94.540009 18.280001 l
94.540001 18.280001 l
h
110.891998 9.84 m
109.071999 9.84 l
108.972 7.62 107.131996 6.92 105.512001 6.92 c
104.292 6.92 102.232002 7.26 102.232002 9.440001 c
102.232002 10.660001 103.092003 11.06 103.931999 11.26 c
108.031998 12.200001 l
109.891998 12.64 111.292 13.76 111.292 16.040001 c
111.292 19.440001 108.131996 20.380001 105.671997 20.380001 c
103.011993 20.380001 101.972 19.580002 101.332001 19.000002 c
100.112 17.900002 99.872002 16.700003 99.872002 15.360002 c
101.692001 15.360002 l
101.692001 17.960001 103.812004 18.720001 105.652 18.720001 c
107.052002 18.720001 109.412003 18.360001 109.412003 16.300001 c
109.412003 14.800001 108.712006 14.320002 106.352005 13.760001 c
103.412003 13.080001 l
102.472 12.860001 100.352005 12.200001 100.352005 9.700001 c
100.352005 7.460001 101.812004 5.260001 105.292007 5.260001 c
110.312004 5.260001 110.812004 8.26 110.892006 9.84 c
110.891998 9.84 l
h
119.323997 5.64 m
119.323997 20 l
117.383995 20 l
117.383995 5.64 l
119.323997 5.64 l
119.323997 5.64 l
h
132.235992 13.98 m
132.235992 12.32 l
138.535995 12.32 l
138.535995 20 l
137.276001 20 l
136.815994 18.139999 l
135.835999 19.5 134.035995 20.379999 132.075989 20.379999 c
129.615982 20.379999 128.415985 19.48 127.675987 18.759998 c
125.47599 16.679998 125.415985 14.219998 125.415985 12.699999 c
125.415985 9.199999 127.535988 5.259999 132.215988 5.259999 c
134.895981 5.259999 137.875992 6.779999 138.29599 9.999998 c
136.415985 9.999998 l
135.79599 7.499998 133.695984 6.979998 132.115982 6.979998 c
129.53598 6.979998 127.415985 9.039998 127.415985 12.799998 c
127.415985 15.719998 128.375992 18.719997 132.195984 18.719997 c
132.915985 18.719997 134.075989 18.639997 135.135986 17.799997 c
136.395981 16.799997 136.715988 15.519998 136.715988 13.979998 c
132.235992 13.979998 l
132.235992 13.98 l
h
154.388 17.24 m
154.388 5.639999 l
156.268005 5.639999 l
156.268005 20 l
154.088013 20 l
146.78801 8.4 l
146.748016 8.4 l
146.748016 20 l
144.868011 20 l
144.868011 5.64 l
147.168015 5.64 l
154.348007 17.240002 l
154.388 17.240002 l
154.388 17.24 l
h
179.552 15.82 m
173.79201 15.82 l
172.29201 20 l
170.29201 20 l
175.692 5.64 l
177.892 5.64 l
183.092 20 l
180.972 20 l
179.552 15.82 l
h
174.392 14.1 m
178.85201 14.1 l
176.73201 7.78 l
176.69202 7.78 l
174.392 14.1 l
h
197.724 17.24 m
197.724 5.639999 l
199.604 5.639999 l
199.604 20 l
197.42401 20 l
190.12401 8.4 l
190.08401 8.4 l
190.08401 20 l
188.20401 20 l
188.20401 5.64 l
190.50401 5.64 l
197.68401 17.240002 l
197.724 17.240002 l
197.724 17.24 l
h
206.076 20 m
206.076 5.64 l
211.89601 5.64 l
215.63602 5.64 217.936 8.480001 217.936 12.620001 c
217.936 15.840001 216.53601 20 211.81601 20 c
206.076 20 l
h
208.01601 7.3 m
208.01601 18.34 l
211.776 18.34 l
214.29601 18.34 215.936 16.360001 215.936 12.74 c
215.936 9.119999 214.276 7.3 211.636 7.3 c
208.01601 7.3 l
208.01601 7.3 l
h
232.74001 20 m
232.74001 5.64 l
238.56001 5.64 l
242.30002 5.64 244.60001 8.480001 244.60001 12.620001 c
244.60001 15.840001 243.20001 20 238.48001 20 c
232.74001 20 l
h
234.67999 7.3 m
234.67999 18.34 l
238.43999 18.34 l
240.95999 18.34 242.59999 16.360001 242.59999 12.74 c
242.59999 9.119999 240.93999 7.3 238.29999 7.3 c
234.67999 7.3 l
234.67999 7.3 l
h
261.21201 18.280001 m
261.21201 20 l
250.612 20 l
250.612 5.64 l
261.07199 5.64 l
261.07199 7.360001 l
252.55199 7.360001 l
252.55199 11.76 l
260.41199 11.76 l
260.41199 13.480001 l
252.55199 13.480001 l
252.55199 18.280001 l
261.21198 18.280001 l
261.21201 18.280001 l
h
272.26401 17.879999 m
276.32401 5.639999 l
278.504 5.639999 l
273.26401 20 l
271.20401 20 l
265.96402 5.64 l
268.12402 5.64 l
272.22403 17.880001 l
272.26404 17.880001 l
272.26401 17.879999 l
h
294.556 18.280001 m
294.556 20 l
283.95599 20 l
283.95599 5.64 l
294.41599 5.64 l
294.41599 7.360001 l
285.896 7.360001 l
285.896 11.76 l
293.75598 11.76 l
293.75598 13.480001 l
285.896 13.480001 l
285.896 18.280001 l
294.556 18.280001 l
h
302.36801 5.64 m
302.36801 18.280001 l
309.64801 18.280001 l
309.64801 20 l
300.42801 20 l
300.42801 5.64 l
302.36801 5.64 l
302.36801 5.64 l
h
326.14001 12.82 m
326.14001 9.44 324.26001 6.98 321.14001 6.98 c
318.02002 6.98 316.14001 9.44 316.14001 12.82 c
316.14001 16.200001 318.02002 18.66 321.14001 18.66 c
324.26001 18.66 326.14001 16.200001 326.14001 12.82 c
h
328.14001 12.82 m
328.14001 15.92 326.5 20.379999 321.14001 20.379999 c
315.78003 20.379999 314.14001 15.919999 314.14001 12.82 c
314.14001 9.72 315.78003 5.26 321.14001 5.26 c
326.5 5.26 328.14001 9.719999 328.14001 12.82 c
h
335.91199 7.3 m
335.91199 12.280001 l
339.77197 12.280001 l
341.51196 12.280001 342.69199 11.64 342.69199 9.700001 c
342.69199 7.880001 341.452 7.300001 339.85199 7.300001 c
335.91199 7.300001 l
335.91199 7.3 l
h
335.91199 13.940001 m
335.91199 20 l
333.97198 20 l
333.97198 5.64 l
340.43198 5.64 l
343.09198 5.64 344.69199 7.360001 344.69199 9.68 c
344.69199 11.68 343.55197 13.940001 340.43198 13.940001 c
335.91199 13.940001 l
h
364.14401 20 m
362.26401 20 l
362.26401 11.520001 l
362.26401 11.1 362.30402 9.280001 362.30402 7.940001 c
362.26401 7.940001 l
358.224 20 l
356.30399 20 l
352.26398 7.96 l
352.22397 7.96 l
352.22397 9.28 352.26398 11.1 352.26398 11.520001 c
352.26398 20 l
350.38397 20 l
350.38397 5.64 l
353.16397 5.64 l
357.26398 17.780001 l
357.30399 17.780001 l
361.38397 5.64 l
364.14398 5.64 l
364.14398 20 l
364.14401 20 l
h
381.23599 18.280001 m
381.23599 20 l
370.63599 20 l
370.63599 5.64 l
381.09598 5.64 l
381.09598 7.360001 l
372.57599 7.360001 l
372.57599 11.76 l
380.43597 11.76 l
380.43597 13.480001 l
372.57599 13.480001 l
372.57599 18.280001 l
381.23599 18.280001 l
h
396.62799 17.24 m
396.62799 5.639999 l
398.508 5.639999 l
398.508 20 l
396.328 20 l
389.02802 8.4 l
388.98801 8.4 l
388.98801 20 l
387.108 20 l
387.108 5.64 l
389.40799 5.64 l
396.58798 17.240002 l
396.62799 17.240002 l
396.62799 17.24 l
h
403.64001 7.36 m
403.64001 5.64 l
415.30002 5.64 l
415.30002 7.360001 l
410.44003 7.360001 l
410.44003 20 l
408.50003 20 l
408.50003 7.36 l
403.64005 7.36 l
403.64001 7.36 l
h
f
Q
q
[95.100624 0 0 95.136894 416.33853 13.107884] cm
/DeviceRGB {} CS
[1 1 1] SC
/DeviceRGB {} cs
[1 1 1] sc
0.56 14.16 m
0.56 4.8 l
5.36 4.8 l
5.36 4.24 l
0 4.24 l
0 14.16 l
0.56 14.16 l
h
5.56 20 m
5.56 19.459999 l
0.56 19.459999 l
0.56 15.32 l
1.36 15.32 l
1.36 14.78 l
-0 14.78 l
-0 20 l
5.56 20 l
h
12.36 15.22 m
13.21334 14.74 13.866699 14.0633 14.32 13.190001 c
14.7733 12.316701 15 11.3267 15 10.22 c
15 9.940001 l
15 8.3 14.51 6.940001 13.53 5.860001 c
12.549999 4.780001 11.1534 4.240001 9.34 4.240001 c
7.96 4.240001 l
7.96 10.580001 l
8.18666 10.593341 8.41332 10.600001 8.63998 10.600001 c
8.63998 4.880002 l
9.29998 4.880002 l
10.939981 4.880002 12.17998 5.356662 13.01998 6.310001 c
13.859981 7.263341 14.279981 8.486601 14.279981 9.980001 c
14.279981 10.200002 l
14.279981 11.680002 13.859981 12.893402 13.01998 13.840002 c
12.17998 14.786602 10.939981 15.260002 9.29998 15.260002 c
8.63998 15.260002 l
7.95998 15.260002 l
7.95998 15.900003 l
8.359981 15.913343 8.62664 15.920003 8.75998 15.920003 c
9.33998 15.920003 l
10.25998 15.920003 11.06668 15.780003 11.75998 15.500003 c
14.239981 20.000004 l
15.039981 20.000004 l
12.36 15.22 l
h
17.639999 4.24 m
17.639999 20 l
18.16 20 l
18.16 4.24 l
17.639999 4.24 l
h
22.92 13.36 m
26.880001 20 l
27.660002 20 l
23.320002 12.719999 l
22.92 13.36 l
h
23 12.14 m
27.48 4.3 l
26.68 4.3 l
21.040001 14.240001 l
21.040001 4.260001 l
20.360001 4.260001 l
20.360001 15.500001 l
21.040001 15.500001 l
21.040001 15.480001 l
22.580002 12.8 l
23 12.14 l
h
f
Q
q
[95.100616 0 0 95.136887 5061.6885 13.108004] cm
/DeviceRGB {} CS
[1 1 1] SC
/DeviceRGB {} cs
[1 1 1] sc
7.08 19.32 m
6.41334 19.266659 5.8666 18.959999 5.44 18.4 c
5 18.82 l
5.53334 19.51334 6.206699 19.9 7.02 19.98 c
7.08 19.32 l
h
7.7 19.98 m
8.46 19.9 9.05 19.553339 9.469999 18.939999 c
9.889998 18.326658 10.099999 17.499998 10.099999 16.459999 c
10.099999 4.239999 l
9.52 4.239999 l
9.52 16.459999 l
9.50666 18.206699 8.879999 19.16 7.639999 19.32 c
7.7 19.98 l
h
21.440001 4.26 m
21.440001 14.900001 l
21.440001 16.300001 21.07 17.380001 20.33 18.140001 c
19.59 18.900002 18.706699 19.313301 17.68 19.380001 c
17.68 19.630001 l
17.68 19.700001 l
17.68 20 l
18.960001 19.92 19.986601 19.446659 20.76 18.58 c
21.5334 17.713341 21.92 16.486599 21.92 14.9 c
21.92 4.259999 l
21.440001 4.259999 l
21.440001 4.26 l
h
16.940001 19.399981 m
15.900001 19.319981 15.0333 18.899981 14.34 18.13998 c
13.6467 17.37998 13.3 16.29998 13.3 14.899981 c
13.3 4.25998 l
12.7 4.25998 l
12.7 14.899981 l
12.7 16.499981 13.08334 17.72998 13.849999 18.589981 c
14.616659 19.449982 15.6467 19.919981 16.939999 19.999981 c
16.939999 19.70998 l
16.939999 19.399981 l
16.940001 19.399981 l
h
31.5 4.58 m
31.499981 16.139999 l
31.499981 16.5 31.506641 16.9 31.519981 17.34 c
31.533321 17.780001 31.539982 18.00666 31.539982 18.02 c
31.513321 17.98 31.416662 17.76334 31.250002 17.370001 c
31.083342 16.976662 30.920002 16.626661 30.760002 16.320002 c
30.480001 15.780002 l
29.760002 15.780002 l
31.960003 20.000002 l
32.140003 20.000002 l
32.140003 4.580002 l
31.500004 4.580002 l
31.5 4.58 l
h
25.879999 7.94 m
26.159979 8.480001 l
26.879978 8.480001 l
24.659979 4.240001 l
24.519979 4.240001 l
24.519979 19.700001 l
25.13998 19.700001 l
25.13998 8.1 l
25.13998 7.76666 25.13332 7.37666 25.11998 6.93 c
25.10664 6.48334 25.099979 6.25334 25.099979 6.24 c
25.113319 6.28 25.206659 6.5 25.379999 6.9 c
25.553339 7.3 25.719999 7.64666 25.879999 7.94 c
h
41.740002 20 m
43.953403 20 45.84 19.219999 47.400002 17.66 c
48.17334 16.9 48.756702 16.08 49.150002 15.2 c
49.543301 14.32 49.740002 13.32 49.740002 12.2 c
49.740002 9.9734 48.960003 8.0934 47.400002 6.56 c
45.84 5.04 43.913403 4.2734 41.620003 4.26 c
40.206703 4.27334 38.880001 4.62668 37.640003 5.32 c
36.426704 6.02666 35.460003 7.0067 34.740002 8.26 c
35.320004 8.58 l
35.973343 7.42 36.860004 6.52 37.980003 5.88 c
39.086704 5.24 40.300003 4.91334 41.620003 4.9 c
43.753403 4.91334 45.526604 5.62668 46.940002 7.04 c
48.353302 8.4267 49.066601 10.1466 49.080002 12.2 c
49.080002 13.2267 48.900002 14.1433 48.540001 14.95 c
48.18 15.7567 47.653339 16.5133 46.959999 17.219999 c
45.533298 18.6467 43.7934 19.359999 41.739998 19.359999 c
40.459999 19.359999 39.299999 19.086658 38.259998 18.539999 c
37.959999 19.119999 l
39.0933 19.706659 40.353397 19.999998 41.739998 19.999998 c
41.740002 20 l
h
f
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
